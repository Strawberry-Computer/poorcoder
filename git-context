#!/bin/bash

# simplified-git-context - Minimalist Git Context Generator for Commit Messages
# Generates essential git-related context to help LLMs create meaningful commit messages

# Default values
RECENT_COMMITS=3
PROMPT_FILE="prompts/commit_prompt.txt"
INCLUDE_PROMPT=true

# Parse arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --recent-commits=*) RECENT_COMMITS="${1#*=}"; shift ;;
        --prompt=*) PROMPT_FILE="${1#*=}"; shift ;;
        --no-prompt) INCLUDE_PROMPT=false; shift ;;
        --help|-h)
            echo "Usage: ./git-context [options]"
            echo ""
            echo "Options:"
            echo "  --recent-commits=<num>    Show most recent N commits for context (default: 3)"
            echo "  --prompt=<file>           Use custom commit message prompt from file (default: prompts/commit_prompt.txt)"
            echo "  --no-prompt               Don't include commit message prompt"
            echo "  --help, -h                Show this help message"
            exit 0
            ;;
        *) echo "Unknown parameter: $1"; exit 1 ;;
    esac
done

# Ensure we're in a git repository
if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "Error: Not a git repository"
    exit 1
fi

# Begin output
echo "# Git Context for Commit Message Generation"
echo ""

# Show git status
status_output=$(git status --porcelain)
if [ -n "$status_output" ]; then
    echo "## Git Status"
    echo ""
    echo '```'
    git status -s
    echo '```'
    echo ""
fi

# Show changes using git diff HEAD
diff_output=$(git diff HEAD)
if [ -n "$diff_output" ]; then
    echo "## Current Changes (Diff)"
    echo ""
    echo '```diff'
    echo "$diff_output"
    echo '```'
    echo ""
fi

# Show summary of files changed
if [ -n "$status_output" ]; then
    echo "## Files Changed"
    echo ""
    
    echo "$status_output" | while read -r line; do
        # Extract the status code (first two characters)
        status_code="${line:0:2}"
        # Extract the filename (everything after the status code and whitespace)
        file=$(echo "$line" | sed 's/^.. *//')
        status_desc=""
        
        # Determine the status description
        case "$status_code" in
            "M "|" M") status_desc="modified" ;;
            "A ") status_desc="added" ;;
            "D ") status_desc="deleted" ;;
            "R ") status_desc="renamed" ;;
            "C ") status_desc="copied" ;;
            "??") status_desc="untracked" ;;
            *) status_desc="$status_code" ;;
        esac
        
        echo "- $file ($status_desc)"
    done
    echo ""
fi

# Show recent commits
if [ $RECENT_COMMITS -gt 0 ]; then
    echo "## Recent Commits (for reference)"
    echo ""
    git log -n $RECENT_COMMITS --pretty=format:"- %h: %s (%an, %ar)" | while read line; do
        echo "$line"
    done
    echo ""
fi

# Include commit message prompt
if [ "$INCLUDE_PROMPT" = true ]; then
    echo "## Commit Message Guidance"
    echo ""
    
    # Check if prompt file exists
    if [ -f "$PROMPT_FILE" ]; then
        cat "$PROMPT_FILE"
    else
        echo "Please write a clear and concise commit message that explains WHAT changes were made and WHY they were necessary."
        echo "Focus on the purpose and impact of the changes, not just the technical details."
    fi
    echo ""
fi

exit 0
